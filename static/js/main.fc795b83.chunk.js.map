{"version":3,"sources":["pages/main.js","pages/login.js","App.js","index.js"],"names":["Main","useState","amount","setAmount","mintAmount","setMintAmount","showAddress","setShowAddress","contextClass","success","error","info","warning","default","dark","useEffect","a","toast","temp","localStorage","getItem","toString","pre","substring","suf","className","toastClassName","type","bodyClassName","style","color","position","autoClose","id","onClick","redeem","Login","setWalletAccount","setIsConnected","onboard","Onboard","dappId","networkId","subscriptions","wallet","Web3","provider","console","log","name","handleConnectWallet","window","ethereum","walletSelect","walletCheck","request","method","accounts","account","web3","balance","eth","getBalance","err","wei","utils","fromWei","addresses","item","find","address","setItem","location","pathname","map","user","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc795b83.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport Web3 from \"web3\"\r\nimport { FullPage } from 'react-full-page'\r\nimport { contractAbi, contractAddress } from '../config'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport addresses from \"../whitelist.json\"\r\n\r\nimport './App.css'\r\nimport { AccountTree } from '@material-ui/icons'\r\n\r\nconst Main = () => {\r\n  const [ amount, setAmount ] = useState(1);\r\n  const [ mintAmount, setMintAmount ] = useState(0);\r\n  const [ redeemAmount, setRedeemAmount ] = useState(1);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [method, setMethod] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [totalSupply, setTotalSupply] = useState(0);\r\n  const [maxSupply, setMaxSupply] = useState(0);\r\n  const [price, setPrice] = useState(0);\r\n  const [displayPrice, setDisplayPrice] = useState(0);\r\n  const [balance, setBalance] = useState(0);\r\n  const [tokens, setTokens] = useState([]);\r\n  const [ walletAccount, setWalletAccount ] = useState('')\r\n  const [ showAddress, setShowAddress ] = useState('')\r\n  const [ isConnected, setIsConnected ] = useState(false)\r\n  let [mintNum, setMintNum] = useState(1);\r\n  const api = \"https://supbirds.com/meta/\";\r\n  const contextClass = {\r\n    success: \"bg-blue-600\",\r\n    error: \"bg-red-600\",\r\n    info: \"bg-gray-600\",\r\n    warning: \"bg-orange-400\",\r\n    default: \"bg-indigo-600\",\r\n    dark: \"bg-white-600 font-gray-300\",\r\n  };\r\n  const increase = () => {\r\n    if(amount < 25 ) {\r\n      setAmount(amount + 1)\r\n    }    \r\n  }\r\n   const decrease = () => {\r\n    if(amount > 1 ) {\r\n      setAmount(amount - 1)\r\n    }    \r\n  }\r\n  const mint = () => {\r\n    if( mintAmount + amount <= 25 ) {\r\n      setMintAmount(mintAmount+amount);\r\n      toast.success(\"You minted \"+amount+\" AZDAO NFT successfully.\");\r\n    }\r\n  }\r\n  const redeem = () => {\r\n    \r\n  }\r\n  useEffect(async () => {\r\n    toast.success(\"You can access to MINT successfully.\");\r\n    const temp = localStorage.getItem(\"targetAddress\").toString();\r\n    const pre = temp.substring(0,6);\r\n    const suf = temp.substring(38, 42);\r\n    setShowAddress(pre+\"********\"+suf);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"main-component\">\r\n        <header className=\"header-component\">\r\n          3&#176;12'43.2\r\n        </header>\r\n        <ToastContainer \r\n          toastClassName={({ type }) => contextClass[type || \"dark\"] + \r\n          \" relative flex p-1 min-h-10 rounded-md justify-between overflow-hidden cursor-pointer\"\r\n          }\r\n          bodyClassName={() => \"text-sm font-white font-med block p-3\"}\r\n          style={{ color : \"#3f6\"}}\r\n          position=\"top-right\"\r\n          autoClose={3000}\r\n        />\r\n        <div className=\"login-content\">\r\n          <div className='line1'>Welcome { showAddress }</div>\r\n          <div className='line2'>You own { mintAmount }/25 AZDAOCode NFTs</div> \r\n          <div>Redeem 0 new AZDAOCode NFTs</div>\r\n          <div>\r\n            <button className='redeem-button' id=\"redeemButton\" onClick={redeem()}>REDEEM</button>\r\n          </div>\r\n          <div className='line3'>Invitation code:</div>\r\n          <div>Mint 1 AZDAOcode NFT to</div>\r\n          <div>get your invitation code</div>\r\n            <br></br>\r\n          <div>Each invite that mint -</div>\r\n          <div>Redeem Free AZDAOcode NFT</div>\r\n          <br></br>\r\n          <div className='line4'>Mint AZDAOcode NFT</div>\r\n          <div className=\"payment-count\">\r\n            <div className=\"btn-group\">\r\n                <div>\r\n                    <button onClick={()=> decrease()}>-</button>\r\n                </div>\r\n                <div>\r\n                    {amount}\r\n                </div>\r\n                <div>\r\n                    <button onClick={()=> increase()}>+</button>\r\n                </div>\r\n            </div>\r\n          </div>\r\n          <div>0.1 eth</div>\r\n          <div>\r\n            <button className='enter-button' onClick={()=> mint()}>MINT</button>\r\n          </div>\r\n          <br></br>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport Onboard from 'bnc-onboard'\r\nimport Web3 from \"web3\"\r\nimport { FullPage } from 'react-full-page'\r\nimport { contractAbi, contractAddress } from '../config'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport addresses from \"../whitelist.json\"\r\n\r\nimport './App.css'\r\n\r\nconst Login = () => {\r\n\r\n  const [chainId, setChainId] = useState(null);\r\n  const [method, setMethod] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [totalSupply, setTotalSupply] = useState(0);\r\n  const [maxSupply, setMaxSupply] = useState(0);\r\n  const [price, setPrice] = useState(0);\r\n  const [displayPrice, setDisplayPrice] = useState(0);\r\n  const [balance, setBalance] = useState(0);\r\n  const [tokens, setTokens] = useState([]);\r\n  const [ walletAccount, setWalletAccount ] = useState('')\r\n  const [ isConnected, setIsConnected ] = useState(false)\r\n  let [mintNum, setMintNum] = useState(1);\r\n  const api = \"https://supbirds.com/meta/\";\r\n  const BLOCKNATIVE_KEY = 'blocknative-api-key'\r\n  const NETWORK_ID = 1\r\n  const onboard = Onboard({\r\n    dappId: BLOCKNATIVE_KEY,\r\n    networkId: NETWORK_ID,\r\n    subscriptions: {\r\n      wallet: wallet => {\r\n        // instantiate web3 when the user has selected a wallet\r\n        let web3 = new Web3(wallet.provider)\r\n        console.log(`${wallet.name} connected!`)\r\n      }\r\n    }\r\n  })\r\n  const contextClass = {\r\n    success: \"bg-blue-600\",\r\n    error: \"bg-red-600\",\r\n    info: \"bg-gray-600\",\r\n    warning: \"bg-orange-400\",\r\n    default: \"bg-indigo-600\",\r\n    dark: \"bg-white-600 font-gray-300\",\r\n  };\r\n  const handleConnectWallet = async () => {\r\n    \r\n    console.log('Connecting MetaMask...')\r\n    if(!window.ethereum) {\r\n      // alert(\"You must install metamask extension and continue.\");\r\n      toast.success(\"You must install metamask extension and continue.\");\r\n      return;\r\n    }\r\n    await onboard.walletSelect()\r\n    await onboard.walletCheck()\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n    \r\n    const account = accounts[0]\r\n    \r\n    window.web3 = new Web3(window.ethereum);\r\n    const balance = window.web3.eth.getBalance(account, (err, wei) => { balance = window.web3.utils.fromWei(wei, 'ether')})\r\n    console.log('Account: ', account)\r\n    setWalletAccount(account)\r\n    setIsConnected(true)\r\n    console.log(addresses)\r\n    let item = addresses.find(a => a.address == account);\r\n    \r\n    if (item || balance >= 1 ) {   \r\n        console.log(item.id);\r\n        localStorage.setItem(\"targetAddress\", item.address);\r\n        window.location.pathname = \"./main\"\r\n    } else if ( balance < 1 ) {\r\n      toast.success(\"You have at least 1 NFT to login\");\r\n      return;\r\n    }\r\n    else {\r\n      toast.success(\"You are not on whitelist.\");\r\n    }\r\n  }\r\n  useEffect(async () => {\r\n    \r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"main-component\">\r\n        <header className=\"header-component\">\r\n          5&#176;12'39.6\r\n        </header>\r\n        <ToastContainer \r\n          toastClassName={({ type }) => contextClass[type || \"info\"] + \r\n          \" relative flex p-1 min-h-10 rounded-md justify-between overflow-hidden cursor-pointer\"\r\n          }\r\n          bodyClassName={() => \"text-md font-white font-med block p-3\"}\r\n          position=\"top-right\"\r\n          style={{ color : \"#3f6\"}}\r\n          autoClose={3000}\r\n        />\r\n        <div className=\"login-content\">\r\n          <div className='line1'>You must own a AZDAOCode NFT</div>\r\n          <div className='line2'>Connect your wallet to log in</div>\r\n          <div>\r\n            <button className='connect-button' id=\"connectButton\" onClick={() => handleConnectWallet()}>CONNECT</button>\r\n          </div><br></br>\r\n          <div>Or enter your invitation code</div><br></br>\r\n          <div>\r\n            <input className='input-invitecode'></input>\r\n          </div><br></br>\r\n          <div>\r\n            <button className='enter-button'>ENTER</button>\r\n          </div>\r\n          <br></br>\r\n          <div>\r\n            -WhiteList-<br></br>\r\n            Login to redeem your Free AZDAOCode NFT\r\n          </div>\r\n          <div className='parent'>\r\n            <div className='whitelist-area' >\r\n            <div className=\"users\">\r\n              {addresses.map((user) => (\r\n                <div className=\"user\" key={user.id}>{user.address}</div>\r\n              ))}\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\r\nimport Main from \"./pages/main.js\"\r\nimport Login from \"./pages/login.js\"\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Login />}></Route>\r\n        <Route path=\"/main\" element={<Main />}></Route>\r\n      </Routes>\r\n    </Router>  \r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}